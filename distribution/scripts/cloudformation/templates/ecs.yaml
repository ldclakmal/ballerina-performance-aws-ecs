# ----------------------------------------------------------------------------
#
# Copyright (c) 2020, WSO2 Inc. (http://wso2.org) All Rights Reserved.
#
# WSO2 Inc. licenses this file to you under the Apache License,
# Version 2.0 (the "License"); you may not use this file except
# in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
# ----------------------------------------------------------------------------
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation Template to run performance tests. This template
  would create a Amazon ECS cluster and run the tests using Fargate instances. 
  The JMeter Client EC2 instance will be in a public subnet with a public IP. 
  All other EC2 instances will be in a private subnet.
  **WARNING** This template creates multiple Amazon AWS resources. You will be
  billed for the AWS resources used if you create a stack from this template.
#############################
# User inputs
#############################
Parameters:
  UserEmail:
    Type: String
    Description: Email address of the user creating the stack
    AllowedPattern: '[^\s@]+@[^\s@]+\.[^\s@]+'
    ConstraintDescription: You should enter a valid email
  PrivateSubnet:
    Type: String
    Description: ID of the private subnet
  NettyImage:
    Type: String
    Description: URI of the netty image on ECR
  TestImage:
    Type: String
    Description: URI of the test image on ECR
  SecurityGroup:
    Type: String
    Description: ID of the Security Group
  VPC:
    Type: String
    Description: ID of the VPC
  BallerinaMemory:
    Type: String
    Description: Memory constraint for the test
  BallerinaCPU:
    Type: String
    Description: CPU constraint for the test

    
################################
# Create AWS resources
################################
Resources:
  ####################################################################
  # Create IAM resources for ECS task execution
  ####################################################################
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                # ECS Tasks to download images from ECR
                - 'ecr:GetAuthorizationToken'
                - 'ecr:BatchCheckLayerAvailability'
                - 'ecr:GetDownloadUrlForLayer'
                - 'ecr:BatchGetImage'
                # ECS tasks to upload logs to CloudWatch
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
              Resource: '*'
 
  ####################################################################
  # Create ECS Cluster and load balancer
  ####################################################################
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: 'perf-test-cluster'
      Tags:
        - Key: Name
          Value: !Join
            - ':'
            - - 'ECS-Cluster'
              - !Ref AWS::StackName
        - Key: User
          Value: !Ref UserEmail
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: ecs-load-balancer
      Type: network
      Scheme: internal
      Subnets:
        - !Ref PrivateSubnet
      Tags:
        - Key: Name
          Value: !Join
            - ':'
            - - 'LoadBalancer'
              - !Ref AWS::StackName
        - Key: User
          Value: !Ref UserEmail  
  ####################################################################
  # Netty server
  ####################################################################
  NettyTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: netty
      Cpu: 2048
      Memory: 4096
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      ContainerDefinitions:
        - Name: netty-container
          Image: !Ref NettyImage
          PortMappings:
            - ContainerPort: 8688
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: 'perf-test'
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: 'netty'
      Tags:
        - Key: Name
          Value: !Join
            - ':'
            - - 'NettyTask'
              - !Ref AWS::StackName
        - Key: User
          Value: !Ref UserEmail
  NettyService:
    Type: AWS::ECS::Service
    DependsOn: NettyLoadBalancerListener
    Properties:
      ServiceName: netty-service
      TaskDefinition: !Ref NettyTask
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      DesiredCount: 1
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - !Ref PrivateSubnet
          SecurityGroups:
            - !Ref SecurityGroup
      LoadBalancers:
        - ContainerName: netty-container
          ContainerPort: 8688
          TargetGroupArn: !Ref NettyTargetGroup
      Tags:
        - Key: Name
          Value: !Join
            - ':'
            - - 'NettyService'
              - !Ref AWS::StackName
        - Key: User
          Value: !Ref UserEmail
  NettyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: netty-tg
      VpcId: !Ref VPC
      Port: 8688
      Protocol: TCP
      Matcher:
        HttpCode: 200-399
      HealthCheckPath: /service/EchoService
      HealthCheckProtocol: HTTP
      TargetType: ip
      Tags:
        - Key: Name
          Value: !Join
            - ':'
            - - 'NettyTargetGroup'
              - !Ref AWS::StackName
        - Key: User
          Value: !Ref UserEmail
  NettyLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Protocol: TCP
      Port: 8688
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref NettyTargetGroup
  ####################################################################
  # Ballerina test
  ####################################################################
  BalTask:
    Type: AWS::ECS::TaskDefinition
    DependsOn: LoadBalancer
    Properties:
      Family: bal
      Cpu: !Ref BallerinaCPU
      Memory: !Ref BallerinaMemory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      ContainerDefinitions:
        - Name: bal-container
          Image: !Ref TestImage
          PortMappings:
            - ContainerPort: 9090
              Protocol: tcp
          Environment:
            - Name: NETTY_HOST 
              Value: !GetAtt LoadBalancer.DNSName
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: 'perf-test'
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: 'bal-test'
      Tags:
        - Key: Name
          Value: !Join
            - ':'
            - - 'BalTask'
              - !Ref AWS::StackName
        - Key: User
          Value: !Ref UserEmail
  BalService:
    Type: AWS::ECS::Service
    DependsOn: NettyLoadBalancerListener
    Properties:
      ServiceName: bal-service
      TaskDefinition: !Ref BalTask
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      DesiredCount: 1
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref PrivateSubnet
          SecurityGroups:
            - !Ref SecurityGroup
      LoadBalancers:
        - ContainerName: bal-container
          ContainerPort: 9090
          TargetGroupArn: !Ref BalTargetGroup
      Tags:
        - Key: Name
          Value: !Join
            - ':'
            - - 'BalService'
              - !Ref AWS::StackName
        - Key: User
          Value: !Ref UserEmail
  BalTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: bal-tg
      VpcId: !Ref VPC
      Port: 9090
      Protocol: TCP
      Matcher:
        HttpCode: 200-399
      HealthCheckPath: /passthrough/health-check
      HealthCheckProtocol: HTTP
      TargetType: ip
      Tags:
        - Key: Name
          Value: !Join
            - ':'
            - - 'BalTargetGroup'
              - !Ref AWS::StackName
        - Key: User
          Value: !Ref UserEmail
  BalLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Protocol: TCP
      Port: 9090
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref BalTargetGroup