# ----------------------------------------------------------------------------
#
# Copyright (c) 2020, WSO2 Inc. (http://wso2.org) All Rights Reserved.
#
# WSO2 Inc. licenses this file to you under the Apache License,
# Version 2.0 (the "License"); you may not use this file except
# in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
# ----------------------------------------------------------------------------
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation Template to run performance tests. This template
  would create a Amazon ECS cluster and run the tests using Fargate instances. 
  The JMeter Client EC2 instance will be in a public subnet with a public IP. 
  All other EC2 instances will be in a private subnet.
  **WARNING** This template creates multiple Amazon AWS resources. You will be
  billed for the AWS resources used if you create a stack from this template.
#############################
# User inputs
#############################
Parameters:
  UserEmail:
    Type: String
    Description: Email address of the user creating this stack.
    AllowedPattern: '[^\s@]+@[^\s@]+\.[^\s@]+'
    ConstraintDescription: You should enter a valid email.
    Default: "user@example.com"
  KeyName:
    Type: 'AWS::EC2::KeyPair::KeyName'
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance.
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.
  GitHubRepoURL:
    Type: String
    Description: URL for the GitHub repo of the Ballerina performance tests.
    ConstraintDescription: Must be the URL of the GitHub repository.
    Default: "https://github.com/SmithAbey/ballerina-performance-aws-ecs.git"
  GitHubRepoBranch:
    Type: String
    Description: Branch of the GitHub repo of the Ballerina performance tests.
    Default: "master"  
  GitUsername:
    Type: String
    Description: CPU Constraint for the test.
    Default: ""
  GitPassword:
    Type: String
    Description: CPU Constraint for the test.
    Default: ""  
  BallerinaVersion:
    Type: String
    Description: Version for the Ballerina deb file.
    ConstraintDescription: Must be the name of the Ballerina deb file version.
    Default: "swan-lake-alpha3"
  JMeterOptions:
    Type: String
    Description: Options for JMeter.
    ConstraintDescription: A string of options for JMeter.
    Default: "-m 2G -u 100 -b 50 -b 100"
  BallerinaMemory:
    Type: String
    Description: Memory Constraint for the test.
    Default: "2048"
  BallerinaCPU:
    Type: String
    Description: CPU Constraint for the test.
    Default: "1024"
  LatestAmiId:
    Type: String
    Description: Image ID of the EC2 Instance.
    Default: "ami-042e8287309f5df03"
  InstanceType:
    Type: String
    Description: WebServer EC2 instance type.
    Default: t2.micro
    AllowedValues:
      - t1.micro
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m1.small
      - m1.medium
      - m1.large
      - m1.xlarge
      - m2.xlarge
      - m2.2xlarge
      - m2.4xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - c1.medium
      - c1.xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - g2.2xlarge
      - g2.8xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
      - hi1.4xlarge
      - hs1.8xlarge
      - cr1.8xlarge
      - cc2.8xlarge
      - cg1.4xlarge
    ConstraintDescription: Must be a valid EC2 instance type.
################################
# Create AWS resources
################################
Resources:
  ####################################################################
  # Create IAM resources for ECS task execution
  ####################################################################
  EC2ResourceAccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: AmazonEC2ContainerRegistryFullAccess 
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                # Full access to ECR 
                - 'ecr:*'
              Resource: '*'
        - PolicyName: AWSCloudFormationFullAccess 
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                # ECS Tasks to download images from ECR
                - 'cloudformation:*'
              Resource: '*'
        - PolicyName: IAMFullAccess 
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                # To create IAM role
                - 'iam:*'
              Resource: '*'
        - PolicyName: ElasticLoadBalancingFullAccess 
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                # To create elastic load balancer
                - 'elasticloadbalancing:*'
              Resource: '*'
        - PolicyName: AmazonECS_FullAccess 
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                # To create elastic load balancer
                - 'ecs:*'
              Resource: '*'
  EC2InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref EC2ResourceAccessRole
  ##########################################################################################
  # Create VPC, public subnet and private subnet
  ##########################################################################################
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Join
            - ':'
            - - 'VPC'
              - !Ref AWS::StackName
        - Key: User
          Value: !Ref UserEmail
  # Configure Public Subnet
  PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: 10.0.0.0/24
      Tags:
        - Key: Name
          Value: !Join
            - ':'
            - - 'PublicSubnet'
              - !Ref AWS::StackName
        - Key: User
          Value: !Ref UserEmail
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Join
            - ':'
            - - 'InternetGateway'
              - !Ref AWS::StackName
        - Key: User
          Value: !Ref UserEmail
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join
            - ':'
            - - 'PublicRouteTable'
              - !Ref AWS::StackName
        - Key: User
          Value: !Ref UserEmail
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable
  # Configure Private Subnet
  PrivateSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: 10.0.1.0/24
      Tags:
        - Key: Name
          Value: !Join
            - ':'
            - - 'PrivateSubnet'
              - !Ref AWS::StackName
        - Key: User
          Value: !Ref UserEmail
  NatGateway:
    Type: 'AWS::EC2::NatGateway'
    DependsOn: AttachGateway
    Properties:
      AllocationId: !GetAtt
        - NatGatewayIPAddress
        - AllocationId
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: !Join
            - ':'
            - - 'NatGateway'
              - !Ref AWS::StackName
        - Key: User
          Value: !Ref UserEmail
  NatGatewayIPAddress:
    Type: 'AWS::EC2::EIP'
    DependsOn: AttachGateway
    Properties:
      Domain: vpc
  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join
            - ':'
            - - 'PrivateRouteTable'
              - !Ref AWS::StackName
        - Key: User
          Value: !Ref UserEmail
  PrivateRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway
  PrivateSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable
  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Security Group for Fargate tasks
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  ##########################################################################################
  # Create File System
  ##########################################################################################
  FileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      Encrypted: false
      FileSystemTags:
        - Key: Name
          Value: !Join
            - ':'
            - - 'FileSystem'
              - !Ref AWS::StackName
        - Key: User
          Value: !Ref UserEmail
      PerformanceMode: generalPurpose
      ThroughputMode: bursting

  MountTarget:
    Type: AWS::EFS::MountTarget
    Properties: 
      FileSystemId: !Ref FileSystem
      SubnetId: !Ref PublicSubnet
      IpAddress: 10.0.0.108
      SecurityGroups: 
        - !Ref SecurityGroup

  ##########################################################################################
  # Create EC2 instance to start performance tests
  ##########################################################################################
  EC2Instance:
    Type: 'AWS::EC2::Instance'
    DependsOn: MountTarget
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref EC2InstanceProfile
      Tags:
        - Key: Name
          Value: !Join
            - ':'
            - - 'EC2Instance'
              - !Ref AWS::StackName
        - Key: User
          Value: !Ref UserEmail
      NetworkInterfaces:
        - GroupSet:
            - !Ref SecurityGroup
          AssociatePublicIpAddress: 'true'
          SubnetId: !Ref PublicSubnet
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          export GITHUB_REPO_URL="${GitHubRepoURL}"
          export GITHUB_REPO_BRANCH="${GitHubRepoBranch}"
          export BALLERINA_VERSION="${BallerinaVersion}"
          export JMETER_OPTIONS="${JMeterOptions}"
          export FILE_SYSTEM="${FileSystem}"
          export BALLERINA_MEMORY="${BallerinaMemory}"
          export BALLERINA_CPU="${BallerinaCPU}"
          export USER_EMAIL="${UserEmail}"
          export PRIVATE_SUBNET="${PrivateSubnet}"
          export SECURITY_GROUP="${SecurityGroup}"
          export VPC="${VPC}"
          export AWS_ACCOUNT_ID="${AWS::AccountId}"
          export AWS_REGION="${AWS::Region}"
          export GIT_USERNAME="${GitUsername}"
          export GIT_PASSWORD="${GitPassword}"
          # Set custom directory as environment variables
          export HOME_DIR="/home/ubuntu"
          export GITHUB_REPO_DIR="$HOME_DIR/ballerina-performance-aws-ecs"
          export SCRIPTS_DIR="$GITHUB_REPO_DIR/distribution/scripts"
          export FILE_SYSTEM_DIR="/mnt/efs/"
          # Mount directory to read ECS output
          apt-get update
          apt-get install -y curl nfs-common
          apt install -y libarchive-tools
          mkdir $FILE_SYSTEM_DIR
          mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport 10.0.0.108:/ $FILE_SYSTEM_DIR
          # Clone the GitHub repository.
          git clone -b $GITHUB_REPO_BRANCH $GITHUB_REPO_URL $GITHUB_REPO_DIR
          if [ ! -d $GITHUB_REPO_DIR ]; then
            echo "Failed to clone the GitHub repository $GITHUB_REPO_URL."
            exit 1
          fi
          if [ ! -d $SCRIPTS_DIR ]; then
            echo "Scripts directory is not available."
            exit 1
          fi
          find $SCRIPTS_DIR -type f -iname "*.sh" -exec chmod +x {} \;
          $SCRIPTS_DIR/setup/setup-start.sh
